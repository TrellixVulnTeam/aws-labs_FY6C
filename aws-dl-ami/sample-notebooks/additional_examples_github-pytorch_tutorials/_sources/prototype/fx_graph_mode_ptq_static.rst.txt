.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_prototype_fx_graph_mode_ptq_static.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_prototype_fx_graph_mode_ptq_static.py:


(prototype) FX Graph Mode Post Training Static Quantization
===========================================================

**Author**: `Jerry Zhang <https://github.com/jerryzh168>`_

This tutorial introduces the steps to do post training static quantization in graph mode based on
`torch.fx <https://github.com/pytorch/pytorch/blob/master/torch/fx/__init__.py>`_. 
The advantage of FX graph mode quantization is that we can perform quantization fully automatically on the model
although there might some effort required to make the model compatible with FX Graph Mode Quantizatiion (symbolically traceable with ``torch.fx``),
we'll have a separate tutorial to show how to make the part of the model we want to quantize compatibble with FX Graph Mode Quantization. 

We also have a tutorial for FX Graph Mode Post Training Dynamic Quantization(todo).	

tldr; The FX Graph Mode API looks like the following:

.. code:: python

    import torch
    from torch.quantization import get_default_qconfig
    # Note that this is temporary, we'll expose these functions to torch.quantization after official releasee
    from torch.quantization.quantize_fx import prepare_fx, convert_fx

    float_model.eval()
    qconfig = get_default_qconfig("fbgemm")
    qconfig_dict = {"": qconfig}

    def calibrate(model, data_loader):
        model.eval()
        with torch.no_grad():
            for image, target in data_loader:
                model(image)

    prepared_model = prepare_fx(float_model, qconfig_dict)  # fuse modules and insert observers
    calibrate(prepared_model, data_loader_test)  # run calibration on sample data
    quantized_model = convert_fx(prepared_model)  # convert the calibrated model to a quantized model

1. Motivation of FX Graph Mode Quantization
-------------------------------------------

Currently PyTorch only has eager mode quantization: `Static Quantization with Eager Mode in PyTorch <https://pytorch.org/tutorials/advanced/static_quantization_tutorial.html>`_.

We can see there are multiple manual steps involved in the process, including:

- Explicitly quantize and dequantize activations, this is time consuming when floating point and quantized operations are mixed in a model.
- Explicitly fuse modules, this requires manually identifying the sequence of convolutions, batch norms and relus and other fusion patterns.
- Special handling is needed for pytorch tensor operations (like add, concat etc.)
- Functionals did not have first class support (functional.conv2d and functional.linear would not get quantized)

Most of these required modifications comes from the underlying limitations of eager mode quantization. Eager mode works in module level since it can not inspect the code that is actually run (in the forward function), quantization is achieved by module swapping, and we don’t know how the modules are used in forward function in eager mode, so it requires users to insert QuantStub and DeQuantStub manually to mark the points they want to quantize or dequantize. 
In graph mode, we can inspect the actual code that’s been executed in forward function (e.g. aten function calls) and quantization is achieved by module and graph manipulations. Since graph mode has full visibility of the code that is run, our tool is able to automatically figure out things like which modules to fuse and where to insert observer calls, quantize/dequantize functions etc., we are able to automate the whole quantization process.

Advantages of FX Graph Mode Quantization are:

- Simple quantization flow, minimal manual steps
- Unlocks the possibility of doing higher level optimizations like automatic precision selection

2. Define Helper Functions and Prepare Dataset
----------------------------------------------

We’ll start by doing the necessary imports, defining some helper functions and prepare the data. 
These steps are identitcal to `Static Quantization with Eager Mode in PyTorch <https://pytorch.org/tutorials/advanced/static_quantization_tutorial.html>`_.    

Download dataset:

.. code::

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/imagenet_1k.zip

and unzip to `data` folder.
Download the `torchvision resnet18 model <https://github.com/pytorch/vision/blob/master/torchvision/models/resnet.py#L12>`_ and rename it to
``data/resnet18_pretrained_float.pth``.


.. code-block:: default














    # Setup warnings











    # Specify random seed for repeatable results

































































































































    # deepcopy the model since we need to keep the original model around




3. Set model to eval mode
-------------------------
For post training quantization, we'll need to set model to eval mode.

4. Specify how to quantize the model with ``qconfig_dict``
----------------------------------------------------------

.. code:: python

  qconfig_dict = {"" : default_qconfig}

We use the same qconfig used in eager mode quantization, ``qconfig`` is just a named tuple 
of the observers for activation and weight. ``qconfig_dict`` is a dictionary with the following configurations:

.. code:: python

  qconfig = {
      " : qconfig_global,
      "sub" : qconfig_sub,
      "sub.fc" : qconfig_fc,
      "sub.conv": None
  }
  qconfig_dict = {
      # qconfig? means either a valid qconfig or None
      # optional, global config
      "": qconfig?,
      # optional, used for module and function types
      # could also be split into module_types and function_types if we prefer
      "object_type": [
          (torch.nn.Conv2d, qconfig?),
          (torch.nn.functional.add, qconfig?),
          ...,
      ],
      # optional, used for module names
      "module_name": [
          ("foo.bar", qconfig?)
          ...,
      ],
      # optional, matched in order, first match takes precedence
      "module_name_regex": [
          ("foo.*bar.*conv[0-9]+", qconfig?)
          ...,
      ],
      # priority (in increasing order): global, object_type, module_name_regex, module_name
      # qconfig == None means fusion and quantization should be skipped for anything
      # matching the rule

      # **api subject to change**
      # optional: specify the path for standalone modules
      # These modules are symbolically traced and quantized as one unit
      # so that the call to the submodule appears as one call_module
      # node in the forward graph of the GraphModule
      "standalone_module_name": [
          "submodule.standalone"
      ],
      "standalone_module_class": [
          StandaloneModuleClass
      ]
  }

Utility functions related to ``qconfig`` can be found in the `qconfig <https://github.com/pytorch/pytorch/blob/master/torch/quantization/qconfig.py>`_ file.

5. Prepare the Model for Post Training Static Quantization
----------------------------------------------------------

.. code:: python

    prepared_model = prepare_fx(model_to_quantize, qconfig_dict)

prepare_fx folds BatchNorm modules into previous Conv2d modules, and insert observers 
in appropriate places in the model.

6. Calibration
--------------
Calibration function is run after the observers are inserted in the model. 
The purpose for calibration is to run through some sample examples that is representative of the workload 
(for example a sample of the training data set) so that the observers in the model are able to observe
the statistics of the Tensors and we can later use this information to calculate quantization parameters.

7. Convert the Model to a Quantized Model
-----------------------------------------
``convert_fx`` takes a calibrated model and produces a quantized model.

8. Evaluation
-------------
We can now print the size and accuracy of the quantized model.


.. code-block:: default











    # this does not run due to some erros loading convrelu module:
    # ModuleAttributeError: 'ConvReLU2d' object has no attribute '_modules'
    # save the whole model directly
    # torch.save(quantized_model, fx_graph_mode_model_file_path)
    # loaded_quantized_model = torch.load(fx_graph_mode_model_file_path)

    # save with state_dict
    # torch.save(quantized_model.state_dict(), fx_graph_mode_model_file_path)
    # import copy
    # model_to_quantize = copy.deepcopy(float_model)
    # prepared_model = prepare_fx(model_to_quantize, {"": qconfig})
    # loaded_quantized_model = convert_fx(prepared_model)
    # loaded_quantized_model.load_state_dict(torch.load(fx_graph_mode_model_file_path))

    # save with script







If you want to get better accuracy or performance,  try changing the `qconfig_dict`. 
We plan to add support for graph mode in the Numerical Suite so that you can 
easily determine the sensitivity towards quantization of different modules in a model: `PyTorch Numeric Suite Tutorial <https://pytorch.org/tutorials/prototype/numeric_suite_tutorial.html>`_

9. Debugging Quantized Model
----------------------------
We can also print the weight for quantized an un-quantized conv to see the difference, 
we'll first call fuse explicitly to fuse the conv and bn in the model: 
Note that ``fuse_fx`` only works in eval mode.

10. Comparison with Baseline Float Model and Eager Mode Quantization
---------------------------

In this section we compare the model quantized with FX graph mode quantization with the model 
quantized in eager mode. FX graph mode and eager mode produce very similar quantized models, 
so the expectation is that the accuracy and speedup are similar as well.

We can see that the model size and accuracy of FX	graph mode and eager mode quantized model are pretty similar.

Running the model in AIBench (with single threading) gives the following result:

.. code::

  Scripted Float Model:
  Self CPU time total: 192.48ms

  Scripted Eager Mode Quantized Model:
  Self CPU time total: 50.76ms

  Scripted FX Graph Mode Quantized Model:
  Self CPU time total: 50.63ms

As we can see for resnet18 both FX graph mode and eager mode quantized model get similar speed up over the floating point model,
which is around 2-4x faster than the floating point model. But the actual speedup over floating point model may vary
depending on model, device, build, input batch sizes, threading etc.



.. code-block:: default



    # %%%%%%RUNNABLE_CODE_REMOVED%%%%%%

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_prototype_fx_graph_mode_ptq_static.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: fx_graph_mode_ptq_static.py <fx_graph_mode_ptq_static.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: fx_graph_mode_ptq_static.ipynb <fx_graph_mode_ptq_static.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
